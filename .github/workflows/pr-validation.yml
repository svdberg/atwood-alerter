name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Validate PR title and content
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure allowed types, scopes, etc.
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
      
      - name: Check for breaking changes
        run: |
          echo "Checking for breaking changes..."
          # Check if there are changes to critical infrastructure files
          if git diff --name-only origin/main...HEAD | grep -E "(cdk\.json|app\.py|.*_stack\.py)" > /dev/null; then
            echo "⚠️ Infrastructure changes detected - please ensure backward compatibility"
            echo "::warning::Infrastructure changes detected in this PR"
          fi
          
          # Check for database schema changes
          if git diff --name-only origin/main...HEAD | grep -E "storage\.py" > /dev/null; then
            echo "⚠️ Database schema changes detected - please ensure migration path"
            echo "::warning::Database changes detected in this PR" 
          fi
      
      - name: Estimate deployment cost
        run: |
          echo "💰 Deployment cost estimation"
          echo "This PR would deploy to staging environment only"
          echo "Estimated additional cost: ~$2-5/day for testing"
          echo "Production deployment only occurs on tagged releases"

  # Code quality specific to PR
  pr-code-quality:
    name: PR Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install flake8 black isort mypy bandit
          pip install -r requirements.txt
      
      - name: Run security analysis
        run: |
          bandit -r lambda/ atwood_monitor/ -f json -o bandit-report.json || true
          if [ -s bandit-report.json ]; then
            echo "::warning::Security issues found - check bandit-report.json"
          fi
      
      - name: Check code formatting
        run: |
          black --check --diff . --exclude="(out|cdk\.out|elm-frontend/node_modules)"
          isort --check-only --diff . --skip-glob="out/*" --skip-glob="cdk.out/*"
      
      - name: Run enhanced linting for PR
        run: |
          flake8 . --count --statistics \
            --exclude=out,cdk.out,elm-frontend/node_modules \
            --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s: %(text)s'

  # Test CDK synthesis for both environments
  pr-infrastructure-test:
    name: PR Infrastructure Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install CDK
        run: npm install -g aws-cdk
      
      - name: Install dependencies
        run: pip install -r requirements.txt
      
      - name: Test CDK synthesis for staging
        run: |
          export ENVIRONMENT=staging
          cdk synth --all --quiet
          echo "✅ Staging infrastructure synthesis successful"
      
      - name: Test CDK synthesis for production
        run: |
          export ENVIRONMENT=production  
          cdk synth --all --quiet
          echo "✅ Production infrastructure synthesis successful"
      
      - name: Check for infrastructure diff
        run: |
          echo "📋 Infrastructure changes in this PR:"
          if git diff --name-only origin/main...HEAD | grep -E "\.(py|json)$" | grep -v __pycache__ > changed_files.txt; then
            echo "Changed files:"
            cat changed_files.txt
          else
            echo "No infrastructure files changed"
          fi

  # Frontend validation
  pr-frontend-validation:
    name: PR Frontend Validation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: elm-frontend/package-lock.json
      
      - name: Install Elm
        run: npm install -g elm elm-format elm-review
      
      - name: Install frontend dependencies
        working-directory: elm-frontend
        run: npm ci
      
      - name: Check Elm formatting
        working-directory: elm-frontend
        run: |
          elm-format --validate src/
      
      - name: Run Elm review (if configured)
        working-directory: elm-frontend
        run: |
          if [ -f review/src/ReviewConfig.elm ]; then
            elm-review
          else
            echo "No elm-review configuration found, skipping"
          fi
      
      - name: Build frontend
        working-directory: elm-frontend
        run: |
          chmod +x build.sh
          ./build.sh
      
      - name: Check bundle size
        working-directory: elm-frontend
        run: |
          if [ -f dist/elm.js ]; then
            SIZE=$(wc -c < dist/elm.js)
            echo "📊 Bundle size: $SIZE bytes"
            if [ $SIZE -gt 1000000 ]; then
              echo "::warning::Bundle size is large ($SIZE bytes) - consider optimization"
            fi
          fi

  # Create deployment preview comment
  pr-deployment-preview:
    name: PR Deployment Preview
    runs-on: ubuntu-latest
    needs: [pr-validation, pr-code-quality, pr-infrastructure-test, pr-frontend-validation]
    if: always()
    
    steps:
      - name: Create deployment preview comment
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            
            // Determine overall status
            const needs = ${{ toJSON(needs) }};
            const allPassed = Object.values(needs).every(job => job.result === 'success');
            const statusIcon = allPassed ? '✅' : '❌';
            const statusText = allPassed ? 'All checks passed' : 'Some checks failed';
            
            const comment = `## ${statusIcon} PR Validation Summary
            
            **Status:** ${statusText}
            
            ### 🔍 Validation Results
            - **PR Validation:** ${needs['pr-validation'].result === 'success' ? '✅' : '❌'}
            - **Code Quality:** ${needs['pr-code-quality'].result === 'success' ? '✅' : '❌'}  
            - **Infrastructure Test:** ${needs['pr-infrastructure-test'].result === 'success' ? '✅' : '❌'}
            - **Frontend Validation:** ${needs['pr-frontend-validation'].result === 'success' ? '✅' : '❌'}
            
            ### 🚀 Deployment Plan
            ${allPassed ? `
            When this PR is merged to main:
            1. Automatic deployment to **staging** environment
            2. Integration tests will run against staging
            3. Ready for production deployment via tagged release
            
            **Staging URL:** https://staging.atwood-sniper.com
            ` : `
            ⚠️ This PR has validation issues that need to be resolved before deployment.
            `}
            
            ### 📊 Impact Assessment
            - **Environments affected:** Staging (on merge)
            - **Estimated downtime:** ~2-3 minutes during deployment
            - **Rollback time:** ~5 minutes if needed
            
            _This comment will be updated when the PR is modified._`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('PR Validation Summary')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }